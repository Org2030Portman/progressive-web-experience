image: node:10.16.0

before_script:
  # - ng version
  - yarn --version
  - date

after_script:
  - date

stages:
  - restore
  - build
  - test
  - package
  - publish
  - deploy

restore:
  stage: restore
  only:
    - /^.*\/feature\/.*$/
    - /^.*\/bugfix\/.*$/
    - master
    - develop
    - /^.*\/release\/.*$/
  script:
    - cd workspace
    - yarn add @angular/cli@8.0.0 --save
    # - yarn add node-jq --save
    - yarn install
  cache:
    # Preparing to set/retrieve node_modules cache.
    key: nodemodules
    paths:
      - workspace/node_modules

build:snapshot:
  stage: build
  # only build non prod branches
  only:
    - /^.*\/feature\/.*$/
    - /^.*\/bugfix\/.*$/
  except:
    - master
    - /^.*\/release\/.*$/
  script:
    - cd workspace
    - yarn build lms --aot --no-progress
    - rm -rf dist
    - yarn build lms --no-progress
  artifacts:
    expire_in: 1 day
    paths:
      - workspace/dist
  cache:
    key: nodemodules
    policy: pull
    paths:
      - workspace/node_modules

build:rc:
  stage: build
  # only build non prod branches
  only:
    - develop
    - /^.*\/release\/.*$/
  script:
    - cd workspace
    - ng build lms --aot --no-progress
  artifacts:
    expire_in: 1 day
    paths:
      - workspace/dist
  cache:
    key: nodemodules
    policy: pull
    paths:
      - workspace/node_modules

build:release:
  stage: build
  # only build master and release branches
  only:
    - master
  script:
    - cd workspace
    - ng build lms --aot --prod --no-progress
  artifacts:
    expire_in: 1 day
    paths:
      - workspace/dist
  cache:
    key: nodemodules
    policy: pull
    paths:
      - workspace/node_modules

test:lint:
  stage: test
  only:
    - /^.*\/feature\/.*$/
    - /^.*\/bugfix\/.*$/
    - master
    - develop
    - /^.*\/release\/.*$/
  script:
    - cd workspace
    - yarn lint
  cache:
    key: nodemodules
    policy: pull
    paths:
      - workspace/node_modules

test:lintformatting:
  stage: test
  only:
    - /^.*\/feature\/.*$/
    - /^.*\/bugfix\/.*$/
    - master
    - develop
    - /^.*\/release\/.*$/
  script:
    - cd workspace
    - yarn format:check
  cache:
    key: nodemodules
    policy: pull
    paths:
      - workspace/node_modules

test:unit:
  stage: test
  only:
    - /^.*\/feature\/.*$/
    - /^.*\/bugfix\/.*$/
    - master
    - develop
    - /^.*\/release\/.*$/
  script:
    - cd workspace;
    - yarn test;
  cache:
    key: nodemodules
    policy: pull
    paths:
      - workspace/node_modules

package:snapshot:
  stage: package
  only:
    - /^.*\/feature\/.*$/
    - /^.*\/bugfix\/.*$/
    - /^.*\/release\/.*$/
    - develop
  except:
    - master
  script:
    - cd workspace
    - echo "Package here"
    - cleanver=0.0.1
    - packageVer="$cleanver-$CI_COMMIT_REF_NAME-$CI_BUILD_ID"
    - cleanPackageVer=$(echo $packageVer | tr / _)
    - echo $cleanPackageVer
    - echo "PACKAGE_VERSION=$cleanPackageVer"    > env.props
    - echo "PROJECT_NAME=lms"           >> env.props
    - cat env.props
    - mv dist/apps/lms/* dist/
    - rm -rf dist/apps/
    - zip -r lms.$cleanPackageVer.zip dist/
    - ls lms.*.zip
    - mv lms.*.zip ../
  cache:
    key: packagevars
    paths:
      - workspace/env.props
  artifacts:
    expire_in: 1 day
    paths:
      - lms.*.zip
      - workspace/env.props
  dependencies:
    - build:snapshot
    - build:rc

package:release:
  stage: package
  only:
    - master
  script:
    - cd workspace
    - echo "Package here"
    # - cleanver=$(cat package.json | jq '.version' | cut -d '"' -f 2)
    - cleanver=0.0.1
    - echo $cleanver
    - echo "PACKAGE_VERSION=$cleanver"    > env.props
    - echo "PROJECT_NAME=lms"    >> env.props
    - cat env.props
    - mv dist/apps/lms/* dist/
    - rm -rf dist/apps/
    - zip -r lms.$cleanver.zip dist/
    - ls lms.*.zip
    - mv lms.*.zip ../
  cache:
    key: packagevars
    paths:
      - workspace/env.props
  artifacts:
    expire_in: 1 day
    paths:
      - lms.*.zip
      - workspace/env.props
  dependencies:
    - build:release

publish:
  stage: publish
  only:
    - /^.*\/feature\/.*$/
    - /^.*\/bugfix\/.*$/
    - master
    - develop
    - /^.*\/release\/.*$/
  script:
    - pkg=$(ls lms.*.zip)
    - echo $pkg
    # - curl -v -k --upload-file $pkg https://SOMEWHERE-OUT-THERE/$pkg

deploy:test:
  stage: deploy
  only:
    - /^.*\/feature\/.*$/
    - /^.*\/bugfix\/.*$/
  except:
    - master
    - /^.*\/release\/.*$/
  script:
    - appVars=$(find . -type f \( -iname "env.props" \));
    - source $appVars;
    - echo $PROJECT_NAME;
    - echo $PACKAGE_VERSION;
    # - git clone
    # - url="SOMEWHERE-OUT-THERE";
  cache:
    key: packagevars
    policy: pull
    paths:
      - workspace/env.props
  when: manual

deploy:stage:
  stage: deploy
  only:
    - /^.*\/release\/.*$/
    - develop
  script:
    - appVars=$(find . -type f \( -iname "env.props" \));
    - source $appVars;
    - echo $PROJECT_NAME;
    - echo $PACKAGE_VERSION;
    # - git clone
    # - url="SOMEWHERE-OUT-THERE";
  cache:
    key: packagevars
    policy: pull
    paths:
      - workspace/env.props
  when: manual

deploy:production:
  stage: deploy
  only:
    - master
  script:
    - appVars=$(find . -type f \( -iname "env.props" \));
    - source $appVars;
    - echo $PROJECT_NAME;
    - echo $PACKAGE_VERSION;
    # - git clone
    # - url="SOMEWHERE-OUT-THERE";
  cache:
    key: packagevars
    policy: pull
    paths:
      - workspace/env.props
  when: manual
